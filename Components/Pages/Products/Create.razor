@page "/products/create"
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@attribute [Authorize]

<h3>Novo Produto</h3>

<EditForm Model="@product" OnValidSubmit="@SubmitAsync" FormName="CreateProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Nome do Produto</label>
        <InputText @bind-Value="product.Title" class="form-control" />
        <ValidationMessage For="@(() => product.Title)" />
        
        <label class="form-label">Descrição do Produto</label>
        <InputText @bind-Value="product.Description" class="form-control" />
        <ValidationMessage For="@(() => product.Description)" />
        
        <label class="form-label">Valor do Produto</label>
        <InputNumber @bind-Value="product.Price" class="form-control" />
        <ValidationMessage For="@(() => product.Price)" />

        <label class="form-label">Categoria</label>
        <InputSelect @bind-Value="product.CategoryId" class="form-control">
            @foreach (var category in Categories)
            {
                <option value="@category.Id">@category.Title</option>
            }
        </InputSelect>
        
    </div>
    <button type="submit" class="btn btn-primary mb-1">Salvar</button>
    <a href="/products" class="btn btn-danger mb-1" role="button">Cancelar</a>
</EditForm>

@code {

    [SupplyParameterFromForm]
    public Product product { get; set; } = new();

    public IEnumerable<Category> Categories { get; set; } = Enumerable.Empty<Category>();

    protected override async void OnInitialized()
    {
        Categories = await Context.Categories.AsNoTracking().OrderBy(c => c.Title).ToListAsync();
    }
    public async Task SubmitAsync()
    {
        await Context.Products.AddAsync(product);
        await Context.SaveChangesAsync();
        Navigation.NavigateTo("products");
    }
}
